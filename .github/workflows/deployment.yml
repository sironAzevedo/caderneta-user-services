name: user service

on:
  push:
    branches: [ main ]

jobs:
  build_and_publish:
    name: Build, Package and Publish
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.versioning.outputs.APP_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set and Update Application Version
        id: versioning # ID para referenciar o output
        run: |
          # Gera uma nova vers√£o usando o n√∫mero da execu√ß√£o do workflow. Ex: 1.0.1, 1.0.2...
          NEW_VERSION="1.0.${{ github.run_number }}"
          echo "Nova vers√£o da aplica√ß√£o: $NEW_VERSION"
          
          # Usa o Maven para alterar a vers√£o no pom.xml
          mvn versions:set -DnewVersion=$NEW_VERSION
          
          # Salva a nova vers√£o em um output para ser usada em outros jobs
          echo "APP_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT



      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings><servers><server><id>github</id><username>\${env.GITHUB_ACTOR}</username><password>\${env.GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Package with Maven
        run: mvn clean package -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            sirondba/user-services:${{ steps.versioning.outputs.APP_VERSION }}
            sirondba/user-services:latest
          secrets: |
            "GITHUB_TOKEN=${{ secrets.GH_TOKEN }}"

  deploy:
    name: Deploy da aplica√ß√£o
    runs-on: ubuntu-latest
    needs: [ build_and_publish ]
    steps:
      - name: Execute deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 1. Executa o seu script de deploy como antes
            VERSION=${{ needs.build_and_publish.outputs.APP_VERSION }}
            echo "üöÄ Iniciando o deploy da vers√£o: $VERSION"
            cd ../exports/
            bash docker_update_user_services.sh $VERSION
            
            # Espera um pouco para o cont√™iner come√ßar a subir
            echo "‚è≥ Aguardando a aplica√ß√£o iniciar..."
            sleep 20

            # 2. Inicia a verifica√ß√£o de sa√∫de (Health Check)
            echo "ü©∫ Verificando a sa√∫de da aplica√ß√£o..."
            
            # Tenta por at√© 60 segundos (12 tentativas de 5 segundos)
            for i in {1..12}; do
              # Usa curl para chamar o endpoint e grep para verificar a resposta
              HEALTH_STATUS=$(curl -s http://localhost:8080/actuator/health)
            
              if echo "$HEALTH_STATUS" | grep -q '{"status":"UP"}'; then
              echo "‚úÖ Aplica√ß√£o est√° UP e saud√°vel!"
              exit 0 # Sucesso! Encerra o script com c√≥digo 0
              else
              echo "‚ö™Ô∏è Tentativa $i/12: Aplica√ß√£o ainda n√£o est√° pronta. Status: [$HEALTH_STATUS]. Aguardando 5 segundos..."
              sleep 5
              fi
            done
            
            # 3. Se o loop terminar sem sucesso, falha o workflow
            echo "‚ùå Erro: A aplica√ß√£o n√£o respondeu corretamente ap√≥s 60 segundos."
            exit 1 # Falha! Encerra o script com c√≥digo 1 para indicar erro no workflow